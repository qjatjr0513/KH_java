package com.kh.chap01_abstraction.run;

import com.kh.chap01_abstraction.model.vo.Student;

public class Run {

	/*
	 * 1. 객체지향언어 : "객체"를 "지향"하는 언어로 "객체중심"으로 돌아간다.
	 * 
	 * 2. 객체란 ? 사전적 의미 : 현실세계에 독립적으로 존재하는 모든것을 의미.(유형, 무형, 사물, 개념 , ...)
	 * 
	 * 3. 객체지향 프로그래밍 : 현실세계에서 독립적인 존재들(객체) 간의 상호 작용으로 이루어진다라고 보고,
	 * 						=> 프로그래밍을 통해 가상세계(코드)로 구현하는 과정.
	 * 
	 * 3. 구현하고자 하는 프로그램 상의 필요한 객체를 만들기 위해서(생성하기 위해서) ? 클래스라는 "틀"을 먼저 만들어야함.
	 * 				클래스란? 각 개체들의 속성(정보)들을 담아낼 수 있는 그릇과도 같은 존재
	 * 				어떻게 만드냐? 1단계 추상화, 2단계 캡슐화를 접목하여 만듬.
	 * 
	 * 5. 추상화 과정
	 * 	1) 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해볼 것. // 학생관리 프로그램 -> 학생객체, -> 홍길동, 민정민 ...
	 *  2) 그 객체들이 가지고 있는 공통적인 속성, 기능들을 모두 추출할 것. // 이름, 나이, 성별, 주소, 키, 눈동자 수, 발가락 수, 머리색, 심박수
	 *  3) 그렇게 추출한 것들을 가지고 내가 구현한 프로그램의 "실질적인 목적"에 맞춰 불필요한 속성, 기능들을 제거해서 추려내기.
	 *  	ex) 인적사항관리 -> 키, 눈동자수, 발가락수, 머리색 등등 불필요한 속성 제거.
	 *  4) 최종적으로 추려진 속성들을 가지고 어떤 자료형에 어떤 이름으로 사용할 건지 생각해보기.
	 *  	ex) 이름 -> String name; , 나이 -> int age; 성별 -> char gender;
	 *  
	 *  예) 학생관련 프로그램
	 *  	1) 학생관련 객체(민경민, 홍길동, 이순신) 
	 *  	2) 공통적인 기능 및 속성들(이름, 나이 성별, 주소, 키, 눈동자 수, 발사이즈, 몸무게, 시력, 머리색, 심박수, ....) 
	 *  	3) 학생 "성적"을 관리하는 프로그램이라고 한다면 : 이름, 나이, 국어점수, 수학점수, 학년, 반
	 *  	   학생 "건강"을 관리하는 프로그램이라고 한다면 : 이름, 나이, 키, 시력, 몸무게, 청력
	 *  	4) 자료형과 , 변수명을 사용할지 생각해보기.
	 *  		이름 String name; 나이 int age;
	 *  	5) 위에 선정된 것들을 가지고 본격적으로 프로그래밍을 하려고 한다면.
	 *  		1) "변수"만 가지고 프로그래밍하기.
	 *  			변수 : 하나의 자료형에 하나의 값만 담을 수 있음. ex) int a = 0;
	 *  			민경민이라는 객체를 만들기 위해서 -> String name; int age;
	 *  			홍길동이라는 객체를 만들기 위해서 -> String name2; int age2;
	 *  			이순신이라는 객체를 만들기 위해서 -> String name3; int age3;
	 *  			-> 학생수가 많아질수록, 관리하기 굉장히 힘들다.
	 *  		2) "배열"을 가지고 프로그래밍을 하게 된다면? 
	 *  			배열: 하나의 자료형인 여러개의 값들을 보관할 수 있었음. 같은 자료형만 보관을 해줘야함.
	 *  			String[] name = {"민경민", "홍길동", "이순신","민경민", "홍길동", "이순신","민경민", "홍길동", "이순신","민경민", "홍길동", "이순신","민경민", "홍길동", "이순신","민경민", "홍길동", "이순신"};
	 *  			int[] age = {20, 30, 40,20, 30, 40, 20, 30, 40, 20, 30, 40, 20, 30, 40,};
	 *  			-> 학생이 삭제되거나 , 추가될 때 별도의 추가 작업이 많음. 관리하기가 힘듬.
	 *  		3)  위의 어려움 때문에 나온게 "구조체"라는 개념.
	 *  			구조체: 한번에 여러개의 자료형을 보관할 수 있는 배열같은 형태.
	 *  			String 값도 보관하고, int 값도 보관하고, double 값도 보관할 수 있는 나만의 배열같은 자료형.
	 *  			클래스: 각 객체들의 속성 정보를 담아내는 그릇(틀)과도 같은 존재 
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		/* 
		 * 변수만을 가지고 프로그래밍 하게 된다면
		 * String name1 = "민경민";
		 * int age1 = 20;
		 * double height1 = 168.7;
		 */
		//1. Student클래스(틀)을 만들고 나서 객체 생성함.
		Student std = new Student(); //new 연산자 사용시 메모리영역(heap)에 공간 할당됨.
		//객체생성.
		std.name = "민경민";//필드에 "직접적으로" 접근하여 값을 대입함.
		std.age = 20;
		std.height = 180;
		
		Student hong = new Student(); 
		hong.name = "홍길동";
		hong.age = 30;
		hong.height = 190;
		
		System.out.println(std); // com.kh.chap01_abstraction.model.vo.Student@53bd815b(16진수)
		System.out.println(hong); // com.kh.chap01_abstraction.model.vo.Student@5d22bbb7(16진수)
		
		//xxx님의 나이는 xx살이고, 키는 xxxcm 입니다.
		
		System.out.printf("%s님의 나이는 %d 살이고, 키는 %.1fcm입니다.\n", std.name, std.age, std.height);
		System.out.printf("%s님의 나이는 %d 살이고, 키는 %.1fcm입니다.", hong.name, hong.age, hong.height);
		
		/*
		 * 필드를 public으로 작성시
		 * => "직접적으로" 접근해서 값 대입 및 조회할 경우 보안 문제가 생길수 있다.
		 * => 외부에서 함부로 값을 변질시키거나 조회권한이 없는 사람이 값을 쉽게 가져올 수 있는 문제 발생
		 * => 해결 방법? 캡슐화로 해결!!
		 * 객체지향 설계 원칙중 하나가 "정보은닉" 즉, 정보은닉의 기술중 하나가 캡슐화임.
		 */
	}

}
